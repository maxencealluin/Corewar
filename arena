	if (vm->players_alive <= 0)
	while (++c < vm->players_alive)
		while (j < vm->players_alive && vm->players[j] != NULL)
			if (vm->players[j++]->player_number == to_assign)
		if (vm->players[c] != NULL && vm->players[c]->player_number == 0)
			vm->players[c]->player_number = to_assign;
	vm->nb_players = vm->players_alive;
	vm->last_player_live = vm->players[c - 1]->player_number;
		vm->ncurses = 1;
		if ((*i - 1) == vm->ac - 1)
			vm->detail = ft_atoi(av[*i]);
		vm->debug = 1;
				vm->dump_cycle = ft_atoi(av[i++]);
			vm->stop = !(vm->stop);
			if (vm->stop == 0)
				vm->cycle_sec = vm->cycle_sec >= 795 ? 800 : vm->cycle_sec + 5;
				vm->cycle_sec = vm->cycle_sec <= 5 ? 1 : vm->cycle_sec - 5;
	proc = vm->process;
		if (vm->arena[proc->pc].proc_id == 0)
			vm->arena[proc->pc].proc_id = 1;
	i = vm->nb_players - 1;
	if (vm->cycles >= last_check + vm->cycle_to_die)
		vm->current_checks++;
		if (vm->current_checks >= MAX_CHECKS || vm->number_of_live > NBR_LIVE)
			vm->cycle_to_die -= CYCLE_DELTA;
			if ((vm->detail & 32) != 0)
				ft_printf("Cycle to die is now %d\n", vm->cycle_to_die);
		vm->number_of_live = 0;
		last_check = vm->cycles;
	if ((vm->detail & 2) != 0 && vm->nb_process > 0)
		ft_printf("It is now cycle %d\n", vm->cycles + 1);
	vm->cycles++;
	while (vm->nb_process > 0 && vm->cycle_to_die > 0)
		if (vm->cycles == vm->dump_cycle && vm->ncurses == 0)
		if (vm->ncurses == 1)
		ft_printf("%02hhx ", vm->arena[i++].by);
	process = vm->process;
	if (vm->debug == 0)
	if (vm->debug == 0)
	while (i < vm->players_alive)
		ft_printf("Player: %d\n", vm->players[i]->player_number);
		ft_printf("Order: %d\n", vm->players[i]->order_arg);
		ft_printf("File_path: %s\n", vm->players[i]->file_path);
		ft_printf("Magic: %07x\n", vm->players[i]->header->magic);
		ft_printf("prog_name: %s\n", vm->players[i]->header->prog_name);
		ft_printf("comment: %s\n", vm->players[i]->header->comment);
	ft_printf("%p\n", vm->arena);
	ft_printf("%s\n", vm->arena);
	vm->arena[i++].by++;
	while (++i < vm->nb_players)
		if (vm->players[i] == NULL)
		ft_memdel((void **)&(vm->players[i]->header));
		ft_memdel((void **)&(vm->players[i]->file_path));
		ft_memdel((void **)&(vm->players[i]));
	while (vm->process)
		tmp = vm->process;
		vm->process = vm->process->next;
	while (i < vm->nb_players)
		if (vm->players[i]->player_number == nb)
	if (i != vm->nb_players)
		return (vm->players[i]->header->prog_name);
	ft_printf("Contestant %d, \"%s\", has won !\n", vm->last_player_live,
		find_player_name(vm, vm->last_player_live));
	while (i < vm->nb_players)
		if (vm->players[i] != NULL)
			vm_read_byte(vm->players[i], vm);
	vm->ncurses = 0;
	vm->detail = vm->ncurses == 1 ? 0 : vm->detail;
	if (vm->ncurses == 1)
	k = vm->visu.b_h + 2;
	move(k, vm->visu.b_w_l + 1);
		color = ft_iabs(vm->arena[i].id) + 10 * (vm->arena[i].proc_id != 0)
			+ 100 * (vm->arena[i].st_id > 0);
		if (vm->arena[i].st_id > 0 && run == 1)
			vm->arena[i].st_id -= 1;
		printw("%02hhx", vm->arena[i].by);
		i = (i % 64) * 3 + 10 > vm->visu.w_l ? i + (64 - i % 64) : i + 1;
			move(++k, vm->visu.b_w_l + 1);
	while (i < vm->nb_players)
		nm = ft_strsub(vm->players[i]->header->prog_name, 0, vm->visu.w_r - 20);
		printw("Player %d:", vm->players[i]->player_number);
		printw("  Lives in current period: %-7d", vm->players[i]->lives_curr);
	move(vm->visu.b_h + 2, vm->visu.b_w_r + 3);
	move(vm->visu.b_h + 4, vm->visu.b_w_r + 3);
	if (vm->stop == 0)
	move(vm->visu.b_h + i++, vm->visu.b_w_r + 3);
	printw("Current cycle: %-7d", vm->cycles + 1);
	move(vm->visu.b_h + i++, vm->visu.b_w_r + 3);
	printw("Cycle to die: %-4d", vm->cycle_to_die);
	move(vm->visu.b_h + i++, vm->visu.b_w_r + 3);
	printw("Players: %-2d", vm->nb_players);
	move(vm->visu.b_h + i++, vm->visu.b_w_r + 3);
	printw("Process: %-8d", vm->nb_process);
	move(vm->visu.b_h + i++, vm->visu.b_w_r + 3);
	printw("Cycle per sec: %-3d", vm->cycle_sec);
	move(vm->visu.b_h + i++, vm->visu.b_w_r + 3);
	printw("Number of lives: %-6d", vm->number_of_live);
	move(vm->visu.b_h + i++, vm->visu.b_w_r + 3);
	printw("Last player live: %-10d", vm->last_player_live);
	menu_players(vm, vm->visu.b_h + i + 2, vm->visu.b_w_r + 3);
		if (vm->visu.boite_l != NULL)
			delwin(vm->visu.boite_l);
		if (vm->visu.boite_r != NULL)
			delwin(vm->visu.boite_r);
		vm->visu.boite_l = subwin(stdscr, vm->visu.h, vm->visu.w_l,
			vm->visu.b_h, vm->visu.b_w_l);
		vm->visu.boite_r = subwin(stdscr, vm->visu.h, vm->visu.w_r,
			vm->visu.b_h, vm->visu.b_w_r);
	wborder(vm->visu.boite_l, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ');
	wborder(vm->visu.boite_r, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ');
		vm->visu.b_h = LINES > L_H ? (LINES - L_H) / 2 : 0;
		vm->visu.h = LINES > L_H ? L_H : LINES;
		vm->visu.b_w_l = COLS > R_W + L_W ? (COLS - R_W - L_W) / 2 : 0;
		vm->visu.w_l = COLS < L_W + R_W ? (COLS - R_W) : L_W;
		vm->visu.w_l = vm->visu.w_l < 0 ? 0 : vm->visu.w_l;
		vm->visu.b_w_r = vm->visu.w_l + vm->visu.b_w_l;
		vm->visu.w_r = COLS > R_W ? R_W : COLS;
	delwin(vm->visu.boite_l);
	delwin(vm->visu.boite_r);
	if ((vm->detail & 4) != 0)
	if ((vm->detail & 4) != 0)
		if (vm->enc_byte[i] == T_REG)
		else if (vm->enc_byte[i] == DIR_SIZE)
		else if (vm->enc_byte[i] == IND_SIZE)
		*size += vm->enc_byte[i++];
	ft_decode_byte2(vm, vm->arena[(proc->pc + 1 + MEM_SIZE) % MEM_SIZE].by);
	if ((vm->detail & 4) != 0)
	ft_decode_byte2(vm, vm->arena[(proc->pc + 1 + MEM_SIZE) % MEM_SIZE].by);
	if ((vm->detail & 4) != 0)
	ft_decode_byte2(vm, vm->arena[(proc->pc + 1 + MEM_SIZE) % MEM_SIZE].by);
	if ((vm->detail & 4) != 0)
	ft_decode_byte2(vm, vm->arena[(p->pc + 1 + MEM_SIZE) % MEM_SIZE].by);
	r = read_arena(vm, p->pc + 2 + vm->enc_byte[0], vm->enc_byte[1]);
	if (is_register(vm->enc_byte[1], r) == 0)
		p->step_over = 2 + vm->enc_byte[0] + vm->enc_byte[1];
	p->step_over = 2 + vm->enc_byte[0] + vm->enc_byte[1];
	if ((vm->detail & 4) != 0)
	ft_decode_byte2(vm, vm->arena[(p->pc + 1 + MEM_SIZE) % MEM_SIZE].by);
	r = read_arena(vm, p->pc + 2 + vm->enc_byte[0], vm->enc_byte[1]);
	if (is_register(vm->enc_byte[1], r) == 0)
		p->step_over = 2 + vm->enc_byte[0] + vm->enc_byte[1];
	p->step_over = 2 + vm->enc_byte[0] + vm->enc_byte[1];
	if ((vm->detail & 4) != 0)
	ft_decode_byte2(vm, vm->arena[(p->pc + 1 + MEM_SIZE) % MEM_SIZE].by);
		size = size + vm->enc_byte[k];
	if ((vm->detail & 4) != 0)
	c = vm->arena[(p->pc + 1 + MEM_SIZE) % MEM_SIZE].by;
	ft_decode_byte2(vm, vm->arena[(p->pc + 1 + MEM_SIZE) % MEM_SIZE].by);
		size = size + vm->enc_byte[k];
	if ((vm->detail & 4) != 0)
	if (vm->enc_byte[0] == DIR_SIZE)
		if ((vm->detail & 4) != 0)
	else if (vm->enc_byte[0] == IND_SIZE)
		if ((vm->detail & 4) != 0)
	if (vm->enc_byte[k] == 1)
		if ((vm->detail & 4) != 0)
	else if (vm->enc_byte[k] == 2)
		if ((vm->detail & 4) != 0)
	else if (vm->enc_byte[k] == 4)
		vm->enc_byte[k] = 2;
		if ((vm->detail & 4) != 0)
	ft_decode_byte2(vm, vm->arena[(proc->pc + 1) % MEM_SIZE].by);
		if ((vm->enc_byte_codes[i] & g_op_tab[op].args_size[i]) == 0)
		else if (vm->enc_byte[i] == T_REG)
			quit = is_register(vm->enc_byte[i], read_arena(vm, proc->pc
		if (vm->enc_byte[i] == DIR_SIZE)
			size += (vm->enc_byte[i] - 2 * g_op_tab[op].size_direct);
			size += vm->enc_byte[i];
	proc->last_live = vm->cycles;
	vm->number_of_live += 1;
	if ((vm->detail & 4) != 0)
	while (i < vm->nb_players)
		if (vm->players[i] != NULL && nb == vm->players[i]->player_number)
			vm->last_player_live = nb;
			vm->players[i]->lives_curr += 1;
			if (vm->ncurses == 0 && (vm->detail & 1) != 0)
				vm->players[i]->player_number,
				vm->players[i]->header->prog_name);
	if ((vm->detail & 4) != 0)
	if ((vm->detail & 4) != 0)
		if (vm->ncurses == 0)
		if ((vm->detail & 4) != 0)
	if ((vm->detail & 4) != 0)
	if ((vm->detail & 4) != 0)
	reg_to_mem(vm, p, vm->arena[verif(p->pc + 2)].by,
	ft_decode_byte2(vm, vm->arena[verif(p->pc + 1)].by);
	if (is_register(vm->enc_byte[0], vm->arena[verif(p->pc + 2)].by) == 0)
		p->step_over = 2 + vm->enc_byte[0] + vm->enc_byte[1];
	if ((vm->detail & 4) != 0)
		ft_printf(" r%d", vm->arena[verif(p->pc + 2)].by);
	if (is_register(vm->enc_byte[1], vm->arena[verif(p->pc + 2
			+ vm->enc_byte[0])].by))
		reg_to_reg(vm->arena[p->pc + 2].by, vm->arena[verif(p->pc + 3)].by, p);
		if ((vm->detail & 4) != 0)
			ft_printf(" r%d\n", vm->arena[verif(p->pc + 3)].by);
		position = read_arena(vm, p->pc + 2 + vm->enc_byte[0], IND_SIZE);
	p->step_over = 2 + vm->enc_byte[0] + vm->enc_byte[1];
	if (vm->enc_byte[k] == 1)
		if ((vm->detail & 4) != 0 && res > 0 && res <= REG_NUMBER)
	else if (vm->enc_byte[k] == 2)
		if ((vm->detail & 4) != 0)
	else if (vm->enc_byte[k] == 4)
		vm->enc_byte[k] = 2;
		if ((vm->detail & 4) != 0)
	ft_decode_byte2(vm, vm->arena[(p->pc + 1 + MEM_SIZE) % MEM_SIZE].by);
	if ((vm->detail & 4) != 0)
		ft_printf(" r%d", vm->arena[(p->pc + 1 + vm->enc_byte[0] + MEM_SIZE)
		size = size + vm->enc_byte[k];
	reg_to_mem(vm, p, vm->arena[((p->pc + 2) + MEM_SIZE) % MEM_SIZE].by,
	if ((vm->detail & 4) != 0)
	p->step_over = vm->enc_byte[0] + vm->enc_byte[1] + vm->enc_byte[2] + 2;
	tab[0] = vm->enc[(c >> 6)];
	tab[1] = vm->enc[(c >> 6)];
	tab[2] = vm->enc[(c >> 6)];
	tab[3] = vm->enc[(c >> 6)];
	vm->enc_byte[0] = vm->enc[(c >> 6) & 3];
	vm->enc_byte[1] = vm->enc[(c >> 4) & 3];
	vm->enc_byte[2] = vm->enc[(c >> 2) & 3];
	vm->enc_byte[3] = vm->enc[c & 3];
	if (vm->debug == 1)
			vm->enc_byte[0], vm->enc_byte[1], vm->enc_byte[2], vm->enc_byte[3]);
		if (vm->enc_byte[i] == IND_SIZE)
			vm->enc_byte_codes[i] = T_IND;
		else if (vm->enc_byte[i] == DIR_SIZE)
			vm->enc_byte_codes[i] = T_DIR;
		else if (vm->enc_byte[i] == T_REG)
			vm->enc_byte_codes[i] = T_REG;
			vm->enc_byte_codes[i] = 0;
	if (vm->debug == 1)
			vm->enc_byte_codes[0], vm->enc_byte_codes[1],
			vm->enc_byte_codes[2], vm->enc_byte_codes[3]);
		vm->arena[i].by = p->regs[reg - 1][count];
		vm->arena[i].id = p->id_parent;
		vm->arena[i].st_id = 40;
	proc->next_op = vm->arena[proc->pc].by;
	vm->arena[proc->pc % MEM_SIZE].proc_id = 0;
	if ((vm->detail & 16) != 0)
			ft_printf("%02x ", vm->arena[((i++) + proc->pc % MEM_SIZE
	vm->arena[proc->pc % MEM_SIZE].proc_id = 1;
	vm->arena[proc->pc % MEM_SIZE].proc_id = 0;
	vm->arena[proc->pc % MEM_SIZE].proc_id = 1;
	vm->arena[proc->pc % MEM_SIZE].proc_id = 0;
	vm->arena[proc->pc % MEM_SIZE].proc_id = 1;
			if ((vm->detail & 4) != 0 && proc->next_op != 16)
	if (vm->players[0] != NULL && vm->nb_players > 0)
		while (i < vm->nb_players && vm->players[i] != NULL)
			ft_iabs(vm->players[i]->player_number),
			vm->players[i]->header->prog_size,
			vm->players[i]->header->prog_name, vm->players[i]->header->comment);
		ft_printf("%02hhx ", vm->arena[i++].by);
	vm->nb_process += 1;
		parent = vm->process;
		vm->process = parent->next;
		vm->nb_process--;
		vm->nb_process--;
	proc = vm->process;
		if (proc->last_live <= vm->cycles - vm->cycle_to_die)
			vm->arena[proc->pc % MEM_SIZE].proc_id = 0;
			if ((vm->detail & 8) != 0)
				proc->id_proc, vm->cycles - proc->last_live - 1,
				vm->cycle_to_die);
	vm->nb_process += 1;
	if (tmp == NULL || vm->process == NULL)
	tmp->next = vm->process;
	vm->process = tmp;
	vm->arena[tmp->pc % MEM_SIZE].proc_id = 1;
	while (i < vm->nb_players)
		add_first_process_front(vm, vm->players[i++], &vm->process);
	nb_players = nb_players == 5 ? vm->nb_players : nb_players;
	if (vm->players_alive == 0)
	zero = MEM_SIZE / vm->players_alive * (vm->players_alive - nb_players--);
		ft_memmove(&vm->arena[(zero + i + MEM_SIZE) % MEM_SIZE].by,
		vm->arena[(zero + i + MEM_SIZE) % MEM_SIZE].id = idx;
	ft_bzero(vm->players, sizeof(vm->players));
	ft_bzero(vm->arena, sizeof(vm->arena));
	vm->process = NULL;
	vm->players_alive = 0;
	vm->number_of_live = 0;
	vm->last_player_live = 0;
	vm->nb_players = 0;
	vm->nb_process = 0;
	vm->cycles = 0;
	vm->cycle_to_die = CYCLE_TO_DIE;
	vm->cycle_sec = 50;
	vm->current_checks = 0;
	vm->stop = 1;
	vm->dump_cycle = -1;
	vm->enc[0] = 0;
	vm->enc[1] = 1;
	vm->enc[2] = DIR_SIZE;
	vm->enc[3] = IND_SIZE;
	ft_bzero(vm->enc_byte, sizeof(vm->enc_byte));
	ft_bzero(vm->enc_byte_codes, sizeof(vm->enc_byte_codes));
	vm->debug = 0;
	vm->detail = 0;
	vm->ac = ac;
	vm->visu.boite_l = NULL;
	vm->visu.boite_r = NULL;
	while (vm->players[j] != NULL && j < MAX_PLAYERS)
		if (vm->players[j]->player_number == next_nb && next_nb != 0)
	if (!(vm->players[j] = (t_player *)malloc(sizeof(t_player))))
	vm->players[j]->file_path = ft_strdup(path);
	vm->players[j]->player_number = next_nb;
	vm->players[j]->code_start = 0;
	vm->players[j]->order_arg = i;
	vm->players[j]->nb_process = 0;
	vm->players[j]->lives_curr = 0;
	vm->players_alive += 1;
	if (!(vm->players[j]->header = (t_header *)malloc(sizeof(t_header))))
	ft_bzero(vm->players[j]->header, sizeof(vm->players[j]->header));
		res += vm->arena[(pos + i + MEM_SIZE) % MEM_SIZE].by << (size - i - 1)
	while (i < vm->nb_players)
		vm->players[i++]->lives_curr = 0;
	vm->current_checks = 0;
	(cycles * 1000 / vm->cycle_sec)) || vm->stop == 1)
